#!/bin/bash

# remastersys-installer has been created by Tony "Fragadelic" Brijeski
# Copyright 2008-2012 Under the GNU GPL2 License
# Originally Created September 12th,2008
# Updated to replace zenity with yad July 2012
#
# sparkylinux-installer has been forked
# for SparkyLinux by pavroo <pavroo@onet.eu> 2013/08/04
# Copyright 2013-2017 Under the GNU GPL2 License
# Last update 2017/12/13
#
# This script requires either yad or dialog to run

# checking to make sure script is running with root privileges
testroot="`whoami`"
if [ "$testroot" != "root" ]
then
	echo " Must be run as root - exiting"
	exit 1
fi

# if NOT Live system just quit, do nothing
testmode=`grep "1000" /etc/passwd | grep -v "Live"`
if [ "$testmode" != "" ]
then
	echo "It is NOT Live system! The Live Installer has to be launched in Live environment only. Exiting now..."
	exit 1
fi

# set options depending on mode - text or gui
DIALOG="`which dialog`"
HEIGHT="17"
WIDTH="75"
MENUHEIGHT="12"
TITLE="--title "
TEXT=""
ENTRY="--inputbox "
MENU="--menu"
YESNO="--yesno "
MSGBOX="--msgbox "
PASSWORD="--passwordbox "
PARTITIONPROG="cfdisk"
TITLETEXT="Sparky (Advanced) Installer"

if [ "$1" = "gui" -o "$2" = "gui" ]
then
	GUI="$DISPLAY"
fi

if [ "$GUI" != "" ]
then

	testyad=`which yad`

	if [ -f /opt/sparky/sparky-xterm ]
	then
		. /opt/sparky/sparky-xterm
	else
		SPARKYXTERM="x-terminal-emulator"
	fi

	if [ "$testyad" != "" ]
	then
		DIALOGMENU="`which yad` --window-icon=/usr/share/icons/sparky/sparkybackupsys/sparky48.png --width=600 --height=400 --fixed --center"
		DIALOG="`which yad` --window-icon=/usr/share/icons/sparky/sparkybackupsys/sparky48.png --width=450 --fixed --center"
		TITLE="--always-print-result --dialog-sep --image=/usr/share/icons/sparky/sparkybackupsys/sparky48.png --title="
		TEXT="--text="
		ENTRY="--entry "
		ENTRYTEXT="--entry-text "
		MENU="--list --column=Pick --column=Info"
		YESNO=" --button=Yes:0 --button=No:1 "
		MSGBOX=" --button=Ok:0 "
		PASSWORD="--entry --hide-text "
		
		testgparted=`which gparted`
		if [ "$testgparted" = "" ]
		then
			PARTITIONPROG="$SPARKYXTERM -e cfdisk"
		else
			PARTITIONPROG="gparted"
		fi
		TITLETEXT="Sparky (Advanced) Installer"
	fi

fi

if [ "$DIALOG" = "" ]
then
	echo "Cannot find dialog or yad.  Exiting."
	exit 1
fi

if [ -f /lib/live/mount/medium/live/minimal ]
then
	INSTALLTEXT1="This is an advanced live installer.\n\nIt lets you install the live system to your hard drive.\n\nIt also lets you install your favorite desktop with\na minimal set of applications, if you wish.\nIt will be possible if the network connection is on.\n\n\nDo you want to continue?"
else
	INSTALLTEXT1="This is an advanced live installer.\n\nIt lets you install the live system to your hard drive as it is.\n\nDo you want to continue?"
fi

TESTEFI=`lsmod | grep efi`	
if [ "$TESTEFI" != "" ]
then
	PARTITIONTEXT="We need to prepare a swap and install partition now.\n\n$PARTITIONPROG will allow you to create the new partitions.\n\nYou must create or have 1 install partition and 1 swap partition.\n\nYou also need 100 MB vfat formatted partition with 'boot' flag, type 'EFI System' if you are installing the system on a machine with UEFI motherboard.\n\nIf you already have partitions setup then just quit $PARTITIONPROG and installation will continue.\n\nClick OK to continue."
else
	PARTITIONTEXT="We need to prepare a swap and install partition now.\n\n$PARTITIONPROG will allow you to create the new partitions.\n\nYou must create or have 1 install partition and 1 swap partition.\n\nIf you already have partitions setup then just quit $PARTITIONPROG and installation will continue.\n\nClick OK to continue."
fi

progressbar () {
tail -f /usr/bin/sparky-installer | $DIALOG $TITLE"$TITLETEXT" $TEXT"$@" --no-buttons --progress --pulsate --auto-close
}

. /etc/live/config.conf
. /etc/sparkybackup/sparkybackup.conf
#if [ "$LIVECDLABEL" != "" ]; then
#	TITLETEXT="$LIVECDLABEL (Advanced) Installer"
#fi

if [ -f /etc/sparkybackup/sparkylinux-installer.conf ]; then
. /etc/sparkybackup/sparkylinux-installer.conf
fi


if [ "$GUI" = "" ]; then
GUILOG="cli"

##########TEXT MODE##########

#inform them what this is and ask if they want to continue

	$DIALOG $TITLE"$TITLETEXT" $YESNO $TEXT"$INSTALLTEXT1" $HEIGHT $WIDTH

	if [ $? != 0 ]; then
		exit 0
	fi

	$DIALOG $TITLE"$TITLETEXT" $YESNO $TEXT"The Live Installer uses US English locale and keyboard layout by default.\n\nWould you like to install with different locale or keyboard settings?\n\nPress YES to change it or NO to keep present configuration." $HEIGHT $WIDTH

	if [ $? = 0 ]; then

		dpkg-reconfigure locales
		dpkg-reconfigure console-data
		#dpkg-reconfigure console-setup
		dpkg-reconfigure keyboard-configuration

	fi

	$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"$PARTITIONTEXT" $HEIGHT $WIDTH

	#choose the drive to partition
	#CKLIVE=`mount | grep "live" | grep -v "loop" | awk '{print $1}' | awk -F "/" '{print $3}' | sed -e 's/[0-9]//g'`
	#DRIVES=`cat /proc/partitions | grep -v loop | grep -v major | grep -v "^$" | awk '{print $4}' | grep -v "[0-9]"`
	DRIVES=`lsblk -l | grep 'disk' | awk '{print $1}'`

	for i in $DRIVES; do
		partdrive="$i"
		partdrivesize=`grep -m 1 "$i" /proc/partitions | awk '{print $3}'`
		partdrivemenu="$partdrivemenu $partdrive $partdrivesize"
	done

	$DIALOG $TITLE"$TITLETEXT" $MENU $TEXT"Please select a drive to partition.\nIf the only option you see is to Quit the installer then no drives were found." $HEIGHT $WIDTH $MENUHEIGHT Exit "Quit the installer" $partdrivemenu 2>/tmp/choice.$$

	if [ "$?" = "0" ]; then
		PARTDRIVE=`cat /tmp/choice.$$`
	else
		PARTDRIVE="Exit"
	fi

	rm /tmp/choice.$$

	if [ "$PARTDRIVE" = "Exit" ]; then
		$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Quitting the installer now." $HEIGHT $WIDTH
		exit 1
	fi

	$PARTITIONPROG /dev/$PARTDRIVE

	# find a partiton for efi image
	TESTEFI=`lsmod | grep efi`	
	if [ "$TESTEFI" != "" ]; then
	PARTEFI=`lsblk -l | grep -v "loop" | grep -v "sr0" | awk '{print $1}' | grep "[0-9]"`
		for i in $PARTEFI; do
			efipart="$i"
			efipartsize=`grep -m 1 "$i" /proc/partitions | awk '{print $3}'`
			efipartmenu="$efipartmenu $efipart $efipartsize"
		done
		
		$DIALOG $TITLE"$TITLETEXT" $MENU $TEXT"Please select a partition to install EFI image to.\nIf the only option you see is to Quit the installer then no EFI partitions were found." $HEIGHT $WIDTH $MENUHEIGHT Exit "Quit the installer" $efipartmenu 2>/tmp/choice.$$

		if [ "$?" = "0" ]; then
			TARGETEFI=`cat /tmp/choice.$$`
		else
			TARGETEFI="Exit"
		fi

		rm /tmp/choice.$$

		if [ "$TARGETEFI" = "Exit" ]; then
			$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Quitting the installer now." $HEIGHT $WIDTH
			exit 1
		fi

		#format the efi partition?
		$DIALOG $TITLE"$TITLETEXT" $MENU $TEXT"Format the EFI partition?" $HEIGHT $WIDTH $MENUHEIGHT noformatefi "Do Not Format if you have other OS installed" formatefi "Format- Sparky will be only one OS on the hard drive now" 2>/tmp/choice.$$

		if [ "$?" = "0" ]; then
			FORMATEFIPART=`cat /tmp/choice.$$`
		else
			FORMATEFIPART="formatefi"
		fi

		rm /tmp/choice.$$
	fi

	#find the swap partition
	#TARGETSWAP=`fdisk -l | grep swap | awk '{print $1}' | cut -d "/" -f3`
	#TARGETSWAP=`cat /proc/partitions | grep -v "loop" | grep -v "sr0" | awk '{print $4}' | grep "[0-9]"`
	#TARGETSWAP=`echo $TARGETSWAP | sed -r "s/\/dev\///g"`
	TARGETSWAP=`lsblk -l | grep -v "loop" | grep -v "sr0" | awk '{print $1}' | grep "[0-9]"`
	for i in $TARGETSWAP; do
		swappart="$i"
		swappartsize=`grep -m 1 "$i" /proc/partitions | awk '{print $3}'`
		swappartmenu="$swappartmenu $swappart $swappartsize"
	done

	$DIALOG $TITLE"$TITLETEXT" $MENU $TEXT"Please select a swap partition to use.\nIf the only option you see is to Quit the installer then no swap partitions were found." $HEIGHT $WIDTH $MENUHEIGHT Exit "Quit the installer" $swappartmenu 2>/tmp/choice.$$

	if [ "$?" = "0" ]; then
		SWAP=`cat /tmp/choice.$$`
	else
		SWAP="Exit"
	fi

	rm /tmp/choice.$$

	if [ "$SWAP" = "Exit" ]; then
		$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Quitting the installer now." $HEIGHT $WIDTH
		exit 1
	fi

	#choose the partition to install to
	#CKLIVE=`mount | grep "live" | grep -v "loop"  | awk '{print $1}' | awk -F "/" '{print $3}'`
	#PARTITIONS=`cat /proc/partitions | grep -v "loop" | grep -v "sr0" | awk '{print $4}' | grep "[0-9]"`
	PARTITIONS=`lsblk -l | grep -v "loop" | grep -v "sr0" | awk '{print $1}' | grep "[0-9]"`
	PARTINSTTEMP=`echo $PARTITIONS | sed -r "s/$SWAP//"`
	PARTINST=`echo $PARTINSTTEMP`
	#for i in $PARTITIONS; do
	#	tempsize=`grep -m 1 "$i" /proc/partitions | awk '{print $3}'`
	#	if [ "$tempsize" = "1" ]; then
	#		PARTINST=`echo $PARTINST | sed -r "s/$i//"`
	#	fi
	#done

	for i in $PARTITIONS; do
		part="$i"
		partsize=`grep -m 1 "$i" /proc/partitions | awk '{print $3}'`
		partmenu="$partmenu $part $partsize"
	done

	$DIALOG $TITLE"$TITLETEXT" $MENU $TEXT"Please select a partition to install the root system to.\nIf the only option you see is to Quit the installer then no partitions were found." $HEIGHT $WIDTH $MENUHEIGHT Exit "Quit the installer" $partmenu 2>/tmp/choice.$$

	if [ "$?" = "0" ]; then
		TARGETPART=`cat /tmp/choice.$$`
	else
		TARGETPART="Exit"
	fi

	rm /tmp/choice.$$

	if [ "$TARGETPART" = "Exit" ]; then
		$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Quitting the installer now." $HEIGHT $WIDTH
		exit 1
	fi

	#choose filesystem type
	$DIALOG $TITLE"$TITLETEXT" $MENU $TEXT"Please select filesystem type for the root partition" $HEIGHT $WIDTH $MENUHEIGHT ext2 "Ext2 filesystem" ext3 "Ext3 filesystem" ext4 "Ext4 filesystem" 2>/tmp/choice.$$

	if [ "$?" = "0" ]; then
		FSTYPE=`cat /tmp/choice.$$`
	else
		FSTYPE="ext4"
	fi

	rm /tmp/choice.$$

	HOMEINST=`echo $PARTINST | sed -r "s/$TARGETPART//"`

	for i in $HOMEINST; do
		homepart="$i"
		homepartsize=`grep -m 1 "$i" /proc/partitions | awk '{print $3}'`
		homepartmenu="$homepartmenu $homepart $homepartsize"
	done

	$DIALOG $TITLE"$TITLETEXT" $MENU $TEXT"Please select a partition to install /home to.\nIf the only option you see is root then no extra partitions were found." $HEIGHT $WIDTH $MENUHEIGHT root "put /home on the root partition" $homepartmenu 2>/tmp/choice.$$

	if [ "$?" = "0" ]; then
		HOMEPART=`cat /tmp/choice.$$`
	else
		HOMEPART="root"
	fi

	rm /tmp/choice.$$

	if [ "$HOMEPART" != "root" ]; then
		#choose filesystem type
		$DIALOG $TITLE"$TITLETEXT" $MENU $TEXT"Please select filesystem type for the home partition" $HEIGHT $WIDTH $MENUHEIGHT noformat "Do Not Format the home partition - not recommended unless you know what you are doing" ext2 "Ext2 filesystem" ext3 "Ext3 filesystem" ext4 "Ext4 filesystem" 2>/tmp/choice.$$

		if [ "$?" = "0" ]; then
			HFSTYPE=`cat /tmp/choice.$$`
		else
			HFSTYPE="ext4"
		fi

		rm /tmp/choice.$$

	fi

	#check mode and get new user info if it is a dist mode
	testmode=`grep "1000" /etc/passwd | grep -v "Live"`

	if [ "$testmode" = "" ]; then

		#root password entry section
		TARGETROOTPASS="1"
		TARGETROOTPASS2="2"

		while [ "$TARGETROOTPASS" != "$TARGETROOTPASS2" ]; do

			$DIALOG $TITLE"$TITLETEXT" $PASSWORD $TEXT"Please enter the password for root." $HEIGHT $WIDTH 2>/tmp/choice.$$
			if [ "$?" = "0" ]; then
				TARGETROOTPASS=`cat /tmp/choice.$$`
			else
				exit 1
			fi

			rm /tmp/choice.$$
			$DIALOG $TITLE"$TITLETEXT" $PASSWORD $TEXT"Please enter the password for root again." $HEIGHT $WIDTH 2>/tmp/choice.$$
			if [ "$?" = "0" ]; then
				TARGETROOTPASS2=`cat /tmp/choice.$$`
			else
				exit 1
			fi

			rm /tmp/choice.$$

			if [ "$TARGETROOTPASS" != "$TARGETROOTPASS2" ]; then
				$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Passwords do not match. Lets try again." $HEIGHT $WIDTH
			fi

		done

		rm /tmp/choice.$$

		#username input secton

		$DIALOG $TITLE"$TITLETEXT" $ENTRY $TEXT"Please enter the new user's real name to be setup on the installed system." $HEIGHT $WIDTH 2>/tmp/choice.$$
		if [ "$?" = "0" ]; then
			TARGETUSERFULLNAME=`cat /tmp/choice.$$`
		else
			exit 1
		fi

		rm /tmp/choice.$$

		$DIALOG $TITLE"$TITLETEXT" $ENTRY $TEXT"Please enter the new username to be setup on the installed system.\nMust be in lowercase letters only." $HEIGHT $WIDTH 2>/tmp/choice.$$
		if [ "$?" = "0" ]; then
			TARGETUSER=`cat /tmp/choice.$$`
		else
			exit 1
		fi

		rm /tmp/choice.$$

		#make sure its all lowercase just in case
		TARGETUSER="`echo $TARGETUSER | awk '{print tolower ($0)}'`"

		#password entry section

		TARGETPASS="1"
		TARGETPASS2="2"

		while [ "$TARGETPASS" != "$TARGETPASS2" ]; do

			$DIALOG $TITLE"$TITLETEXT" $PASSWORD $TEXT"Please enter the password for $TARGETUSER." $HEIGHT $WIDTH 2>/tmp/choice.$$
			if [ "$?" = "0" ]; then
				TARGETPASS=`cat /tmp/choice.$$`
			else
				exit 1
			fi

			rm /tmp/choice.$$

			$DIALOG $TITLE"$TITLETEXT" $PASSWORD $TEXT"Please enter the password for $TARGETUSER again." $HEIGHT $WIDTH 2>/tmp/choice.$$
			if [ "$?" = "0" ]; then
				TARGETPASS2=`cat /tmp/choice.$$`
			else
				exit 1
			fi

			rm /tmp/choice.$$

			if [ "$TARGETPASS" != "$TARGETPASS2" ]; then
				$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Passwords do not match. Lets try again." $HEIGHT $WIDTH
			fi

		done

		rm /tmp/choice.$$

	fi

	#hostname setup
	$DIALOG $TITLE"$TITLETEXT" $ENTRY $TEXT"Please enter the hostname for the installed system.\nOnly small leters, no special characters, no white spaces!" $HEIGHT $WIDTH 2>/tmp/choice.$$
	if [ "$?" = "0" ]; then
		TARGETHOSTNAME=`cat /tmp/choice.$$`
	else
		exit 1
	fi

	rm /tmp/choice.$$

	#grub location
GrubSelectText () {

	## Blank the array in case this function is being rerun
	GrubMenu=()
	#CKLIVE=`mount | grep "live" | grep -v "loop" | awk '{print $1}' | awk -F "/" '{print $3}' | sed -e 's/[0-9]//g'`
	#Drives=$(cat /proc/partitions | grep -v loop | grep -v "Extended" | grep -v "extended" | grep -v "swap" | grep -v "Swap" | grep -v "Hidden" | grep -v major | grep -v "^$" | awk '{ print $4}')
	Drives=$(lsblk -l | grep -v NAME | awk '{print $1}')

	for i in $Drives; do
		PartDrive="$i"

		if [ "$(echo "$PartDrive" | grep [0-9] )" = "" ]; then
			GrubMenu=("${GrubMenu[@]}" "$PartDrive" "Master boot record of disk")
		fi
	done

	GrubMenu=( "${GrubMenu[@]}" "root" "Root partition - safe choice if you use a different boot manager" "rootmbr" "MBR of the root partition - for a usb install" "nogrub" "Do not install GRUB")

	#grub location
	$DIALOG $TITLE"$TITLETEXT" $MENU $TEXT"Please select where to install grub to.\n" $HEIGHT $WIDTH $MENUHEIGHT "${GrubMenu[@]}" 2>/tmp/choice.$$

	if [ "$?" = "0" ]; then
		GRUBLOCTEST=`cat /tmp/choice.$$`
	fi

	rm /tmp/choice.$$

	if [ "$GRUBLOCTEST" = "nogrub" ]; then
		GRUBLOCTEXT="no device, means the GRUB will be NOT installed"
	elif [ "$GRUBLOCTEST" = "root" ]; then
		GRUBLOCTEXT="root partition of $TARGETPART"
		GRUBLOC="/dev/$TARGETPART"
	elif [ "$GRUBLOCTEST" = "rootmbr" ]; then
		GRUBLOCTEXT="mbr of root partition of $TARGETPART"
		GRUBLOC="/dev/$PARTDRIVE"
	elif [ "$GRUBLOCTEST" = "" ]; then
		GrubSelectText
		exit 0
	else
		GRUBLOCTEXT="master boot record of $GRUBLOCTEST"
		GRUBLOC="/dev/$GRUBLOCTEST"
	fi

}
	
GrubSelectText

	#dpkg-reconfigure tzdata
	#Timezone setting

	$DIALOG $TITLE"$TITLETEXT" $YESNO $TEXT"Is your system clock set to your current local time?\n\nAnswering no will indicate it is set to UTC" $HEIGHT $WIDTH
	if [ $? = 0 ]; then
		if [ "$(grep "UTC" /etc/adjtime)" != "" ]; then
			sed -i -e "s|UTC|LOCALTIME|g" /etc/adjtime
		fi
	else
		if [ "$(grep "LOCALTIME" /etc/adjtime)" != "" ]; then
			sed -i -e "s|LOCALTIME|UTC|g" /etc/adjtime
		fi
	fi

	cat /usr/share/zoneinfo/zone.tab | awk '{print $3}' | grep "/" | sort > /tmp/sparkylinux-installer.zoneinfo
	for i in `cat /tmp/sparkylinux-installer.zoneinfo`; do
		ZONES="$ZONES $i Timezone"
	done

	rm /tmp/sparkylinux-installer.zoneinfo

	$DIALOG $TITLE"$TITLETEXT" $MENU $TEXT"Please select a timezone for your system" $HEIGHT $WIDTH $MENUHEIGHT Exit "Quit the installer" $ZONES 2>/tmp/choice.$$

	if [ "$?" = "0" ]; then
		ZONESINFO=`cat /tmp/choice.$$`
	else
		ZONESINFO="Exit"
	fi

	rm /tmp/choice.$$

	if [ "$ZONESINFO" = "Exit" ]; then
		$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Quitting the installer now." $HEIGHT $WIDTH
		exit 1
	fi
	echo "$ZONESINFO" > /etc/timezone
	cp /usr/share/zoneinfo/$ZONESINFO /etc/localtime

	#$SETLOCALE
	#$SETCONSOLEDATA
	#$SETXSERVER

	if [ "$HOMEPART" != "root" ]; then
		HOMETEXT=", $HOMEPART will be formatted $HFSTYPE for /home "
	fi

	if [ "$HFSTYPE" = "noformat" ]; then
		HOMETEXT=", $HOMEPART will not be formatted but used for \n/home "
	fi

	if [ "$testmode" = "" ]; then
		$DIALOG $TITLE"$TITLETEXT" $YESNO $TEXT"Please verify that this information is correct.\n\nNew user $TARGETUSER will be created on the $FSTYPE formatted $TARGETPART partition$HOMETEXT and grub will be installed to the $GRUBLOCTEXT.\n\nDo you want to continue?" $HEIGHT $WIDTH
		if [ $? != 0 ]; then
			exit 0
		fi
	else
		$DIALOG $TITLE"$TITLETEXT" $YESNO $TEXT"Please verify that this information is correct.\nYour backup mode system will be installed on $FSTYPE formatted $TARGETPART partition$HOMETEXT and grub will be installed to the $GRUBLOCTEXT.\n\nDo you want to continue?" $HEIGHT $WIDTH
		if [ $? != 0 ]; then
			exit 0
		fi
	fi

##########END TEXT MODE##########

else
GUILOG="yad"
##########GUI MODE##########

	#inform them what this is and ask if they want to continue

	if [ "$testyad" = "" ]; then
		xmessage "Yad not found. You can run cli mode by issuing 'sudo sparky-installer' in a terminal window"
		exit 1
	fi

	$DIALOG $TITLE"$TITLETEXT" $YESNO $TEXT"$INSTALLTEXT1"

	if [ $? != 0 ]; then
		exit 0
	fi

	#FRONTTEST=`cat /etc/X11/default-display-manager | grep sddm`

	#if [ "$FRONTTEST" = "" ]; then
		FRONTEND="gnome"
	#else
	#	FRONTEND="kde"
	#fi

	$DIALOG $TITLE"$TITLETEXT" $YESNO $TEXT"The Live Installer uses US English locale and keyboard layout by default.\n\nWould you like to install with different locale or keyboard settings?\n\nPress YES to change it or NO to keep present configuration."

	if [ $? = 0 ]; then

		dpkg-reconfigure -f $FRONTEND locales
		dpkg-reconfigure -f $FRONTEND console-data
		#dpkg-reconfigure -f $FRONTEND console-setup
		dpkg-reconfigure -f $FRONTEND keyboard-configuration

	fi

	#fix for gparted being inhibited by udisks-daemon
	killall -KILL udisks-daemon

	$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"$PARTITIONTEXT"

	#choose the drive to partition
	#CKLIVE=`mount | grep "live" | grep -v "loop" | awk '{print $1}' | awk -F "/" '{print $3}' | sed -e 's/[0-9]//g'`
	#DRIVES=`cat /proc/partitions | grep -v loop | grep -v major | grep -v "^$" | awk '{print $4}' | grep -v "[0-9]"`
	DRIVES=`lsblk -l | grep 'disk' | awk '{print $1}'`

	for i in $DRIVES; do
		partdrive="$i"
		partdrivesize=`grep -m 1 "$i" /proc/partitions | awk '{print $3}'`
		partdrivemenu="$partdrivemenu $partdrive $partdrivesize"
	done

	PARTDRIVE=""
	while [ "$PARTDRIVE" = "" ]
	do
		PARTDRIVE=`$DIALOGMENU $TITLE"$TITLETEXT" $MENU  $TEXT"Please select a drive to partition.\nIf the only option you see is to Quit the installer then no drives were found." Exit "Quit the installer" $partdrivemenu`
	done

	PARTDRIVE=`echo $PARTDRIVE | cut -d "|" -f 1`

	if [ "$PARTDRIVE" = "Exit" ]; then
		$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Quitting the installer now."
		exit 1
	fi

	$PARTITIONPROG /dev/$PARTDRIVE

	# find a partiton for efi image
	TESTEFI=`lsmod | grep efi`	
	if [ "$TESTEFI" != "" ]; then
	PARTEFI=`lsblk -l | grep -v "loop" | grep -v "sr0" | awk '{print $1}' | grep "[0-9]"`
		for i in $PARTEFI; do
			efipart="$i"
			efipartsize=`grep -m 1 "$i" /proc/partitions | awk '{print $3}'`
			efipartmenu="$efipartmenu $efipart $efipartsize"
		done

		TARGETEFI=""
		while [ "$TARGETEFI" = "" ]
		do
		TARGETEFI=`$DIALOGMENU $TITLE"$TITLETEXT" $MENU  $TEXT"Please select a partition to install EFI image to.\nIf the only option you see is to Quit the installer then no EFI partitions were found." Exit "Quit the installer" $efipartmenu`
		done

		TARGETEFI=`echo $TARGETEFI | cut -d "|" -f 1`

		if [ "$TARGETEFI" = "Exit" ]; then
			$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Quitting the installer now."
			exit 1
		fi		
	
		#format the efi partition?
		FORMATEFIPART=""
		while [ "$FORMATEFIPART" = "" ]
		do
			FORMATEFIPART=`$DIALOGMENU $TITLE"$TITLETEXT" $MENU  $TEXT"Format the EFI partition?" noformatefi "Do Not Format if you have other OS already installed" formatefi "Format - Sparky will be only one OS on the hard drive now"`
		done
	
		FORMATEFIPART=`echo $FORMATEFIPART | cut -d "|" -f 1`

	fi

	#find the swap partition
	#TARGETSWAP=`cat /proc/partitions | grep -v "loop" | grep -v "sr0" | awk '{print $4}' | grep "[0-9]"`
	#TARGETSWAP=`fdisk -l | grep swap | awk '{print $1}' | cut -d "/" -f3`
	#TARGETSWAP=`echo $TARGETSWAP | sed -r "s/\/dev\///g"`
	TARGETSWAP=`lsblk -l | grep -v "loop" | grep -v "sr0" | awk '{print $1}' | grep "[0-9]"`
	for i in $TARGETSWAP; do
		swappart="$i"
		swappartsize=`grep -m 1 "$i" /proc/partitions | awk '{print $3}'`
		swappartmenu="$swappartmenu $swappart $swappartsize"
	done

	SWAP=""
	while [ "$SWAP" = "" ]
	do
		SWAP=`$DIALOGMENU $TITLE"$TITLETEXT" $MENU  $TEXT"Please select a swap partition to use.\nIf the only option you see is to Quit the installer then no swap partitions were found." Exit "Quit the installer" $swappartmenu`
	done

	SWAP=`echo $SWAP | cut -d "|" -f 1`

	if [ "$SWAP" = "Exit" ]; then
		$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Quitting the installer now."
		exit 1
	fi

	#choose the partition to install to
	#CKLIVE=`mount | grep "live" | grep -v "loop" | awk '{print $1}' | awk -F "/" '{print $3}'`
	#PARTITIONS=`cat /proc/partitions | grep -v "loop" | grep -v "sr0" | awk '{print $4}' | grep "[0-9]"`
	PARTITIONS=`lsblk -l | grep -v "loop" | grep -v "sr0" | awk '{print $1}' | grep "[0-9]"`
	PARTINSTTEMP=`echo $PARTITIONS | sed -r "s/$SWAP//"`
	PARTINST=`echo $PARTINSTTEMP`
	#for i in $PARTINST; do
	#	tempsize=`grep -m 1 "$i" /proc/partitions | awk '{print $3}'`
	#	if [ "$tempsize" = "1" ]; then
	#		PARTINST=`echo $PARTINST | sed -r "s/$i//"`
	#	fi
	#done

	for i in $PARTITIONS; do
		part="$i"
		partsize=`grep -m 1 "$i" /proc/partitions | awk '{print $3}'`
		partmenu="$partmenu $part $partsize"
	done

	TARGETPART=""
	while [ "$TARGETPART" = "" ]
	do
		TARGETPART=`$DIALOGMENU $TITLE"$TITLETEXT" $MENU  $TEXT"Please select a partition to install the root system to.\nIf the only option you see is to Quit the installer then no partitions were found." Exit "Quit the installer" $partmenu`
	done

	TARGETPART=`echo $TARGETPART | cut -d "|" -f 1`

	if [ "$TARGETPART" = "Exit" ]; then
		$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Quitting the installer now."
		exit 1
	fi

	FSTYPE=""
	while [ "$FSTYPE" = "" ]
	do
		FSTYPE=`$DIALOGMENU $TITLE"$TITLETEXT" $MENU  $TEXT"Please select filesystem type for the root partition" ext2 "Ext2 filesystem" ext3 "Ext3 filesystem" ext4 "Ext4 filesystem"`
	done

	FSTYPE=`echo $FSTYPE | cut -d "|" -f 1`

	HOMEINST=`echo $PARTINST | sed -r "s/$TARGETPART//"`
	for i in $HOMEINST; do
		homepart="$i"
		homepartsize=`grep -m 1 "$i" /proc/partitions | awk '{print $3}'`
		homepartmenu="$homepartmenu $homepart $homepartsize"
	done

	HOMEPART=""
	while [ "$HOMEPART" = "" ]
	do
		HOMEPART=`$DIALOGMENU $TITLE"$TITLETEXT" $MENU  $TEXT"Please select a partition to install /home to.\nIf the only option you see is root then no extra partitions were found." root "put /home on the root partition" $homepartmenu`
	done

	HOMEPART=`echo $HOMEPART | cut -d "|" -f 1`

	if [ "$HOMEPART" != "root" ]; then
		HFSTYPE=""
		while [ "$HFSTYPE" = "" ]
		do
			HFSTYPE=`$DIALOGMENU $TITLE"$TITLETEXT" $MENU  $TEXT"Please select filesystem type for the home partition" noformat "Do Not Format the home partition - not recommended unless you know what you are doing" ext2 "Ext2 filesystem" ext3 "Ext3 filesystem" ext4 "Ext4 filesystem"`
		done
	fi

	HFSTYPE=`echo $HFSTYPE | cut -d "|" -f 1`

	#check mode and get new user info if it is a dist mode
	testmode=`grep "1000" /etc/passwd | grep -v "Live"`

	if [ "$testmode" = "" ]; then

		while [ "$PASSOK" != "Yes" ]; do

CHOICES=`$DIALOGMENU $TITLE"$TITLETEXT" --form \
--field="Password for root":H \
--field="Password for root again":H \
--field="New User Real Name" \
--field="New Username" \
--field="Password for new user":H \
--field="Password for new user again":H \
--field="Host Name for the computer"`

			if [ "$?" = "0" ]; then
				TARGETROOTPASS=`echo $CHOICES | cut -d "|" -f 1`
				TARGETROOTPASS2=`echo $CHOICES | cut -d "|" -f 2`
				TARGETUSERFULLNAME=`echo $CHOICES | cut -d "|" -f 3`
				TARGETUSER=`echo $CHOICES | cut -d "|" -f 4`
				TARGETPASS=`echo $CHOICES | cut -d "|" -f 5`
				TARGETPASS2=`echo $CHOICES | cut -d "|" -f 6`
				TARGETHOSTNAME=`echo $CHOICES | cut -d "|" -f 7`
			else 
				$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Quitting the installer now."
				exit 1
			fi

[ "$TARGETROOTPASS" != "" ] && \
[ "$TARGETROOTPASS" = "$TARGETROOTPASS2" ] && \
[ "$TARGETUSERFULLNAME" != "" ] && \
[ "$TARGETUSER" != "" ] && \
[ "$TARGETUSER" != "$LIVE_USERNAME" ] && \
[ "$TARGETPASS" != "" ] && \
[ "$TARGETPASS" = "$TARGETPASS2" ] && \
[ "$TARGETROOTPASS" != "$TARGETPASS" ] && \
[ "$TARGETHOSTNAME" != "" ] && \
PASSOK="Yes"

[ "$TARGETROOTPASS" = "" ] && $DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Root password is blank."

[ "$TARGETROOTPASS" != "$TARGETROOTPASS2" ] && $DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Root passwords do not match."

[ "$TARGETUSERFULLNAME" = "" ] && $DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"User Full Name is blank."

[ "$TARGETUSER" = "" ] && $DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Username is blank."

[ "$TARGETUSER" = "$LIVE_USERNAME" ] && $DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Username can't be the same as the live username."

[ "$TARGETPASS" = "" ] && $DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"User password is blank."

[ "$TARGETPASS" != "$TARGETPASS2" ] && $DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"User passwords do not match."

[ "$TARGETROOTPASS" = "$TARGETPASS" ] && $DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Root and user passwords are the same.\n\nPlease use different passwords."

[ "$TARGETHOSTNAME" = "" ] && $DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Host Name is blank."

		done

	fi

#grub location

GrubSelectGUI () {

	GrubMenu=()
	#CKLIVE=`mount | grep "live" | grep -v "loop" | awk '{print $1}' | awk -F "/" '{print $3}' | sed -e 's/[0-9]//g'`
	#Drives=$(cat /proc/partitions | grep -v loop | grep -v "Extended" | grep -v "extended" | grep -v "swap" | grep -v "Swap" | grep -v "Hidden" | grep -v major | grep -v "^$" | awk '{ print $4}')
	Drives=$(lsblk -l | grep -v NAME | awk '{print $1}')

	for i in $Drives; do
		PartDrive="$i"

		if [ "$(echo "$PartDrive" | grep [0-9] )" = "" ]; then
			GrubMenu=("${GrubMenu[@]}" "$PartDrive" "Master boot record of disk")
		fi
	done

	GrubMenu=( "${GrubMenu[@]}" "root" "Root partition - safe choice if you use a different boot manager" "rootmbr" "MBR of the root partition - for a usb install" "nogrub" "Do not install GRUB" )

	#grub location
	GRUBLOCTEST=$($DIALOGMENU $TITLE"$TITLETEXT" $MENU $TEXT"Please select where to install grub to.\n" "${GrubMenu[@]}")

	ret="$?"

	if [ "$ret" = "252" ]; then
		GrubSelectGUI
		exit 0
	elif [ "$GRUBLOCTEST" = "" ]; then
		GrubSelectGUI
		exit 0
	fi

	GRUBLOCTEST=$(echo "$GRUBLOCTEST" | awk -F '|' '{print $1}')

	if [ "$GRUBLOCTEST" = "nogrub" ]; then
		GRUBLOCTEXT="no device, means the GRUB will be NOT installed"
	elif [ "$GRUBLOCTEST" = "root" ]; then
		GRUBLOCTEXT="root partition of $TARGETPART"
		GRUBLOC="/dev/$TARGETPART"
	elif [ "$GRUBLOCTEST" = "rootmbr" ]; then
		GRUBLOCTEXT="mbr of root partition of $TARGETPART"
		GRUBLOC="/dev/$PARTDRIVE"
	else
		GRUBLOCTEXT="master boot record of $GRUBLOCTEST"
		GRUBLOC="/dev/$GRUBLOCTEST"
	fi
}

GrubSelectGUI

	#Timezone setting

	$DIALOG $TITLE"$TITLETEXT" $YESNO $TEXT"Is your system clock set to your current local time?\n\nAnswering no will indicate it is set to UTC"
	if [ $? = 0 ]; then
		if [ "$(grep "UTC" /etc/adjtime)" != "" ]; then
			sed -i -e "s|UTC|LOCALTIME|g" /etc/adjtime
		fi
	else
		if [ "$(grep "LOCALTIME" /etc/adjtime)" != "" ]; then
			sed -i -e "s|LOCALTIME|UTC|g" /etc/adjtime
		fi
	fi

	cat /usr/share/zoneinfo/zone.tab | awk '{print $3}' | grep "/" | sort > /tmp/sparkylinux-installer.zoneinfo
	for i in `cat /tmp/sparkylinux-installer.zoneinfo`; do
		ZONES="$ZONES $i Timezone"
	done

	rm /tmp/sparkylinux-installer.zoneinfo

	ZONESINFO=""
	while [ "$ZONESINFO" = "" ]
	do
		ZONESINFO=`$DIALOGMENU $TITLE"$TITLETEXT" $MENU  $TEXT"Please select a timezone for your system" Exit "Quit the installer" $ZONES`
	done

ZONESINFO=`echo $ZONESINFO | cut -d "|" -f 1`

	if [ "$ZONESINFO" = "Exit" ]; then
		$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Quitting the installer now."
		exit 1
	fi

	echo "$ZONESINFO" > /etc/timezone
	cp /usr/share/zoneinfo/$ZONESINFO /etc/localtime

	#xterm -e dpkg-reconfigure tzdata
	#if [ "$1" = "intl" ]; then
	#xterm -e $SETLOCALE
	#xterm -e $SETCONSOLEDATA
	#xterm -e $SETXSERVER
	#fi

	if [ "$HOMEPART" != "root" ]; then
		HOMETEXT=", $HOMEPART will be formatted $HFSTYPE for /home "
	fi

	if [ "$HFSTYPE" = "noformat" ]; then
		HOMETEXT=", $HOMEPART will not be formatted but used for \n/home "
	fi

	if [ "$testmode" = "" ]; then
		$DIALOG $TITLE"$TITLETEXT" $YESNO $TEXT"Please verify that this information is correct.\n\nNew user $TARGETUSER will be created on the $FSTYPE formatted $TARGETPART partition$HOMETEXT \nand grub will be installed to the $GRUBLOCTEXT.\n\nDo you want to continue?"
		if [ $? != 0 ]; then
			$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Quitting the installer now."
			exit 1
		fi
	else
		$DIALOG $TITLE"$TITLETEXT" $YESNO $TEXT"Please verify that this information is correct.\n\nYour backup mode system will be installed on $FSTYPE formatted $TARGETPART partition$HOMETEXT \nand grub will be installed to the $GRUBLOCTEXT.\n\nDo you want to continue?"
		if [ $? != 0 ]; then
			$DIALOG $TITLE"$TITLETEXT" $MSGBOX $TEXT"Quitting the installer now."
			exit 1

		fi
	fi

##########END GUI MODE##########

fi

##########install_to_hd section##########

if [ "$GUI" != "" ]; then
	progressbar "Setting up SWAP Now...Please Wait \n" &
fi

sleep 2
echo "Preparing swap partition now"
mkswap /dev/$SWAP
swapon /dev/$SWAP

if [ "$GUI" != "" ]; then
	killall -KILL tail
fi

if [ "$GUI" != "" ]; then
	progressbar "Formatting $TARGETPART Now...Please Wait \n" &
fi
echo "Formatting the $TARGETPART partition now"

## Preserve kernel options in the new grub system
#NewGrubDefLine="$(cat /proc/cmdline | awk -F 'config ' '{print $2}' | awk -F ' BOOT' '{print $1}')"
if [ "$NewGrubDefLine" = "" ]; then
	NewGrubDefLine="quiet"
fi

OldGrubDefLine=$(grep -B 0  "GRUB_CMDLINE_LINUX_DEFAULT=" /etc/default/grub)
OldGrubLine=$(grep -B 0  "GRUB_CMDLINE_LINUX=" /etc/default/grub)
sed -i -e "s/$OldGrubDefLine/GRUB_CMDLINE_LINUX_DEFAULT=\"$NewGrubDefLine\"/g" /etc/default/grub
sed -i -e "s/$OldGrubLine/GRUB_CMDLINE_LINUX=\"\"/g" /etc/default/grub

#make the filesystem and mount the partition on /TARGET
if [ "`mount | grep $TARGETPART`" ]; then
	echo "Unmounting the partition we are going to use and format now"
	umount /dev/$TARGETPART
fi

mke2fs -t $FSTYPE -F /dev/$TARGETPART
mkdir -p /TARGET
sleep 2
echo "Mounting the TARGET partition now"
mount /dev/$TARGETPART /TARGET -o rw
sleep 2
echo "Using tune2fs to prevent the forced checks on boot"
tune2fs -c 0 -i 0 /dev/$TARGETPART 
rm -rf "/TARGET/lost+found"

if [ "$GUI" != "" ]; then
	killall -KILL tail
fi

if [ "$HOMEPART" != "root" ]; then
	if [ "$HFSTYPE" != "noformat" ]; then
		if [ "$GUI" != "" ]; then
			progressbar "Formatting $HOME Now...Please Wait \n" &
		fi

		echo "Formatting the $HOME partition now"

		if [ "`mount | grep $HOMEPART`" ]; then
			echo "Unmounting the partition we are going to use and format now"
			umount /dev/$HOMEPART
		fi
		mke2fs -t $HFSTYPE -F /dev/$HOMEPART
	fi

	echo "Mounting the TARGET home partition now"
	mkdir -p /TARGET/home
	mount /dev/$HOMEPART /TARGET/home -o rw
	tune2fs -c 0 -i 0 /dev/$HOMEPART
	rm -rf "/TARGET/home/lost+found"
	sleep 2

	# Get fs type for home partition in case the user chose not to format
	if [ "$HFSTYPE" = "noformat" ]; then
		HFSTYPE=`mount | grep "/dev/$HOMEPART" | awk '{print $5}'`
	fi

	if [ "$GUI" != "" ]; then
		killall -KILL tail
	fi

fi

#format and mount efi part
TESTEFI=`lsmod | grep efi`
if [ "$TESTEFI" != "" ]; then
	if [ "$FORMATEFIPART" = "formatefi" ]; then
		if [ "`mount | grep $TARGETEFI`" ]; then
			echo "Unmounting the efi partition we are going to use and format now"
			umount /dev/$TARGETEFI
		fi
		
		mkfs.fat -F32 -v /dev/$TARGETEFI
	fi

	echo "Mounting /dev/$TARGETEFI in /TARGET/boot/efi now"

	if [ ! -d /TARGET/boot/efi ]; then
		mkdir -p /TARGET/boot/efi
	fi

	mount -t vfat /dev/$TARGETEFI /TARGET/boot/efi

fi

#get the cdrom device for fstab
#TARGETCDROM=`cat /proc/mounts | grep "/live/image" | awk '{print $1}'`
TARGETCDROM="/dev/cdrom"

sleep 1
if [ "$GUI" != "" ]; then
	killall -KILL tail
fi

testmode=`grep "1000" /etc/passwd | grep -v "Live"`

if [ "$testmode" = "" ]; then
	LIVEMODE="DIST"
else
	LIVEMODE="BACKUP"
fi

cat > /var/log/sparkylinux-installer.log <<FOO
==============================================================
Sparky Advanced Installer log
==============================================================
DATE=`date '+%F'`
KERNEL=`uname -r`
RAMTOTAL=`cat /proc/meminfo | grep MemTotal | awk '{print $2}'`
SWAPTOTAL=`cat /proc/meminfo | grep SwapTotal | awk '{print $2}'`
LOCALE=`locale | grep 'LANG=' | cut -d= -f2`
SCRIPTVERSION=`cat /lib/live/mount/rootfs/filesystem.squashfs/etc/sparkybackup/sparkybackup.version`
LIVEISOIMAGE=`cat /lib/live/mount/rootfs/filesystem.squashfs/etc/sparkybackup/sparkybackup.conf | grep CUSTOMISO`
TARGETUSERGROUPS=`cat /lib/live/mount/rootfs/filesystem.squashfs/etc/sparkybackup/sparkylinux-installer.conf | grep DEFAULTGROUPS`
TARGETGRUBOPT=`cat /lib/live/mount/rootfs/filesystem.squashfs/etc/sparkybackup/sparkylinux-installer.conf | grep NewGrubDefLine`
LIVEMODE=$LIVEMODE
GUI=$GUILOG
TARGETUSER=$TARGETUSER
TARGETHOSTNAME=$TARGETHOSTNAME
SWAP=$SWAP
TARGETPART=$TARGETPART
FSTYPE=$FSTYPE
HOMEPART=$HOMEPART
TARGETEFI=$TARGETEFI
FORMATEFIPART=$FORMATEFIPART
HFSTYPE=$HFSTYPE
GRUBLOC=$GRUBLOC
FOO

echo "==============================================================" >> /var/log/sparkylinux-installer.log
echo "MOUNTS" >> /var/log/sparkylinux-installer.log
echo "==============================================================" >> /var/log/sparkylinux-installer.log
mount >> /var/log/sparkylinux-installer.log
echo "==============================================================" >> /var/log/sparkylinux-installer.log
echo "FDISK listing" >> /var/log/sparkylinux-installer.log
echo "==============================================================" >> /var/log/sparkylinux-installer.log
fdisk -l >> /var/log/sparkylinux-installer.log
echo "==============================================================" >> /var/log/sparkylinux-installer.log
echo "live config listing" >> /var/log/sparkylinux-installer.log
echo "==============================================================" >> /var/log/sparkylinux-installer.log
cat /etc/live/config.conf >> /var/log/sparkylinux-installer.log
echo "==============================================================" >> /var/log/sparkylinux-installer.log

if [ "$GUI" != "" ]; then
	progressbar "Copying the files to the TARGET System...Please Wait \n" &
fi

# copy the live system to the hd
echo "Copying the live system to the hard drive now."
echo "This may take a while so please wait until completed."

if [ "$HFSTYPE" = "noformat" ]; then
	rsync -a / /TARGET --ignore-existing --exclude=/{TARGET,home,live,cdrom,mnt,proc,run,sys,media,lib/live/mount}
else
	rsync -a / /TARGET --ignore-existing --exclude=/{TARGET,live,cdrom,mnt,proc,run,sys,media,lib/live/mount}
fi

mkdir -p /TARGET/{proc,mnt,run,sys,media/cdrom}

echo "Completed copying the files."

if [ "$GUI" != "" ]; then
	killall -KILL tail
fi

if [ "$GUI" != "" ]; then
	progressbar "Performing post-install steps now...Please Wait\n" &
fi

echo "Performing post-install steps now"

#prepare the chroot environment for some post install changes
mount -o bind /proc /TARGET/proc
mount -o bind /dev /TARGET/dev
mount -o bind /dev/shm /TARGET/dev/shm
mount -o bind /dev/pts /TARGET/dev/pts
mount -o bind /sys /TARGET/sys
rm -f /TARGET/etc/fstab
rm -f /TARGET/etc/profile.d/zz-live.sh
mv /TARGET/etc/resolv.conf /TARGET/etc/resolv.conf.bak
cp -f /etc/resolv.conf /TARGET/etc/resolv.conf

# install grub-efi if needed
TESTEFI=`lsmod | grep efi`
if [ "$TESTEFI" != "" ]; then
	mkdir -p /TARGET/boot/efi/EFI/sparky
	mkdir -p /TARGET/debs
	cp /lib/live/mount/medium/offline/* /TARGET/debs/
	
cat > /TARGET/tmp/efi-install << FOO
#!/bin/bash
dpkg -i /debs/*
exit 0
FOO
	chmod +x /TARGET/tmp/efi-install
	echo "Installing grub-efi"
	chroot /TARGET /tmp/efi-install
	rm -f /TARGET/tmp/efi-install
	rm -rf /TARGET/debs
fi

#create the new fstab by uuid
TESTEFI=`lsmod | grep efi`
UUIDTARGETPART=`lsblk -f | grep $TARGETPART | awk '{print $3}'`
UUIDSWAP=`lsblk -f | grep $SWAP | awk '{print $3}'`
UUIDHOMEPART=`lsblk -f | grep $HOMEPART | awk '{print $3}'`
UUIDTARGETEFI=`lsblk -f | grep $TARGETEFI | awk '{print $3}'`

if [ "$HOMEPART" = "root" ]; then
	if [ "$TESTEFI" != "" ]; then
cat > /TARGET/etc/fstab <<FOO
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>

# /dev/$TARGETEFI
UUID=$UUIDTARGETEFI	/boot/efi	vfat	defaults	0	0
# /dev/$TARGETPART
UUID=$UUIDTARGETPART / $FSTYPE relatime,errors=remount-ro 0 1
# /dev/$SWAP
UUID=$UUIDSWAP none swap sw 0 0
# cdrom
$TARGETCDROM /media/cdrom0 udf,iso9660 user,noauto,exec,utf8 0 0

FOO
	else
cat > /TARGET/etc/fstab <<FOO
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>

# /dev/$TARGETPART
UUID=$UUIDTARGETPART / $FSTYPE relatime,errors=remount-ro 0 1
# /dev/$SWAP
UUID=$UUIDSWAP none swap sw 0 0
# cdrom
$TARGETCDROM /media/cdrom0 udf,iso9660 user,noauto,exec,utf8 0 0

FOO
	fi

elif [ "$HOMEPART" != "root" ]; then	
	if [ "$TESTEFI" != "" ]; then
cat > /TARGET/etc/fstab <<FOO
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>

# /dev/$TARGETEFI
UUID=$UUIDTARGETEFI	/boot/efi	vfat	defaults	0	0
# /dev/$TARGETPART
UUID=$UUIDTARGETPART / $FSTYPE relatime,errors=remount-ro 0 1
# /dev/$HOMEPART home
UUID=$UUIDHOMEPART /home $HFSTYPE relatime 0 0
# /dev/$SWAP
UUID=$UUIDSWAP none swap sw 0 0
# cdrom
$TARGETCDROM /media/cdrom0 udf,iso9660 user,noauto,exec,utf8 0 0

FOO
	else
cat > /TARGET/etc/fstab <<FOO
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>

# /dev/$TARGETPART
UUID=$UUIDTARGETPART / $FSTYPE relatime,errors=remount-ro 0 1
# /dev/$HOMEPART home
UUID=$UUIDHOMEPART /home $HFSTYPE relatime 0 0
# /dev/$SWAP
UUID=$UUIDSWAP none swap sw 0 0
# cdrom
$TARGETCDROM /media/cdrom0 udf,iso9660 user,noauto,exec,utf8 0 0

FOO
	fi
	
fi

# remove the old live installer desktop file 
if [ -f /TARGET/etc/skel/Desktop/sparkylinux-installer.desktop ]; then
	rm -f /TARGET/etc/skel/Desktop/sparkylinux-installer.desktop
fi

if [ -f /TARGET/etc/skel/Desktop/sparky-installation-guide.desktop ]; then
	rm -f /TARGET/etc/skel/Desktop/sparky-installation-guide.desktop
fi

# remove the calamares installer desktop file 
if [ -f /TARGET/etc/skel/Desktop/calamares.desktop ]; then
	rm -f /TARGET/etc/skel/Desktop/calamares.desktop
fi

if [ -f /TARGET/usr/share/applications/calamares.desktop ]; then
	rm -f /TARGET/usr/share/applications/calamares.desktop
fi

# remove diverted update-initramfs as live-initramfs makes it a dummy file when booting the livecd
if [ -f /TARGET/usr/sbin/update-initramfs.debian ]; then
	rm -f /TARGET/usr/sbin/update-initramfs
fi

# remove diverted update-notifier as it is disabled by live-config
if [ -f /TARGET/usr/lib/update-notifier/apt-check.debian ]; then
	rm -f /TARGET/usr/lib/update-notifier/apt-check
fi

# remove diverted anacron as it is disabled by live-config
if [ -f /TARGET/usr/sbin/anacron.debian ]; then
	rm -f /TARGET/usr/sbin/anacron
fi

# copy trackerd stuff as live-initramfs disables it
if [ -f /TARGET/etc/sparkybackup/tracker-applet.desktop ]; then
	mv /TARGET/etc/sparkybackup/tracker-applet.desktop /TARGET/etc/xdg/autostart/tracker-applet.desktop
fi

if [ -f /TARGET/etc/sparkybackup/trackerd.desktop.xdg ]; then
	mv /TARGET/etc/sparkybackup/trackerd.desktop.xdg /TARGET/etc/xdg/autostart/trackerd.desktop
fi

if [ -f /TARGET/etc/sparkybackup/trackerd.desktop.share ]; then
	mv /TARGET/etc/sparkybackup/trackerd.desktop.share /TARGET/usr/share/autostart/trackerd.desktop
fi

#restore original inittab as live-initramfs changes it
#cp /TARGET/usr/share/sysvinit/inittab /TARGET/etc/inittab

#check if this is a backup livecd or a dist livecd
if [ "$TARGETUSER" != "" ]; then

	echo "$TARGETHOSTNAME" > /TARGET/etc/hostname
	echo "127.0.0.1 localhost" > /TARGET/etc/hosts
	echo "127.0.0.1 $TARGETHOSTNAME" >> /TARGET/etc/hosts
	touch /TARGET/etc/resolv.conf

	#remove autologin from livecd on installed system

	#gdm3 section
	if [ -f /TARGET/etc/gdm3/daemon.conf ]; then
		sed -i -e 's/AutomaticLogin/#AutomaticLogin/g' /TARGET/etc/gdm3/daemon.conf
		sed -i -e 's/TimedLogin/#TimedLogin/g' /TARGET/etc/gdm3/daemon.conf
	fi

	#slim section
	if [ -f /TARGET/etc/slim.conf ]; then
		sed -i -e 's/auto_login/#auto_login/g' /TARGET/etc/slim.conf
		sed -i -e 's/default_user/#default_user/g' /TARGET/etc/slim.conf
	fi

	#lxdm section
	if [ -f /TARGET/etc/lxdm/lxdm.conf ]; then
		sed -i -e 's/autologin/#autologin/g' /TARGET/etc/lxdm/lxdm.conf
		sed -i -e 's/session/#session/g' /TARGET/etc/lxdm/lxdm.conf
	fi

	#lightdm section
	#if [ -f /TARGET/etc/lightdm/lightdm.conf ]; then
	#	sed -i -e 's/autologin-user=live/#autologin-user=/g' /TARGET/etc/lightdm/lightdm.conf
	#	sed -i -e 's/autologin-user-timeout=0/#autologin-user-timeout=0/g' /TARGET/etc/lightdm/lightdm.conf
	#fi

	#cleanup live polkit file from new install
	rm -f /TARGET/var/lib/polkit-1/localauthority/10-vendor.d/10-live-cd.pkla

	if [ "$DEFAULTGROUPS" = "" ]; then
		DEFAULTGROUPS="audio,cdrom,dialout,floppy,video,plugdev,netdev,sudo"
	fi
fi

if [ "$GUI" != "" ]; then
	killall -KILL tail
fi

# install your favorite desktop of your choice
if [ -f /lib/live/mount/medium/live/minimal ]
then
	if [ "$GUI" != "" ]
	then
		$DIALOG $TITLE"$TITLETEXT" $YESNO $TEXT"You can install your favorite desktop with very small set of applications now.\n\nBefore starting this, the tool will check for updates of 2 important packages:\nsparky-backup-desktop and sparky-desktop-data to provide the latest versions of them.\n\nWould you like to do it now?"
			if [ $? = 0 ]
			then
				DESKTOPCHOOSE="yes"
				$SPARKYXTERM -e apt-get update
				$SPARKYXTERM -e apt-get install sparky-backup-desktop sparky-desktop-data -y --force-yes
				/usr/bin/sparkylinux-desktop-installer gui
			fi
	else
		$DIALOG $TITLE"$TITLETEXT" $YESNO $TEXT"You can install your favorite desktop with very small set of applications now.\n\nBefore starting this, the tool will check for updates of 2 important packages:\nsparky-backup-desktop and sparky-desktop-data to provide the latest versions of them.\n\nWould you like to do it now?" $HEIGHT $WIDTH
			if [ $? = 0 ]
			then
				DESKTOPCHOOSE="yes"
				apt-get update 
				apt-get install sparky-backup-desktop sparky-desktop-data -y --force-yes
				/usr/bin/sparkylinux-desktop-installer
			fi
	fi
fi

# add info about new desktop installation to the log file
if [ "$DESKTOPCHOOSE" != "yes" ]
then
	echo "NEW DESKTOP INSTALLATION=no" >> /TARGET/var/log/sparkylinux-installer.log
	echo "==============================================================" >> /TARGET/var/log/sparkylinux-installer.log
fi
echo "End of Sparky Advanced Installer Log" >> /TARGET/var/log/sparkylinux-installer.log
echo "==============================================================" >> /TARGET/var/log/sparkylinux-installer.log

# synchronize log files
if [ -f /var/log/sparkylinux-installer.log ] && [ -f /TARGET/var/log/sparkylinux-installer.log ]
then
	rm -f /var/log/sparkylinux-installer.log
	cp /TARGET/var/log/sparkylinux-installer.log /var/log/sparkylinux-installer.log
fi

if [ "$GUI" != "" ]; then
	progressbar "Removing live packages and setting up the new user...Please Wait\n" &
fi

echo "Removing live packages and setting up the new user...Please Wait"

if [ "$TARGETUSER" != "" ]; then

cat > /TARGET/bin/tempinstallerscript <<FOO
#!/bin/bash

echo -e "$TARGETROOTPASS\n$TARGETROOTPASS\n" | passwd root
userdel -f -r $LIVE_USERNAME
sed -i '/$LIVE_USERNAME/d' /etc/sudoers
groupadd -g 1000 $TARGETUSER
useradd -u 1000 -g 1000 -c "$TARGETUSERFULLNAME,,," -G $DEFAULTGROUPS -s /bin/bash -m $TARGETUSER
echo -e "$TARGETPASS\n$TARGETPASS\n" | passwd $TARGETUSER
#dpkg-divert --remove --rename --quiet /usr/lib/update-notifier/apt-check
#dpkg-divert --remove --rename --quiet /usr/sbin/update-initramfs
#dpkg-divert --remove --rename --quiet /usr/sbin/anacron
apt-get purge --yes --force-yes sparky-backup-core
apt-get purge --yes --force-yes live-boot
apt-get purge --yes --force-yes live-boot-doc
apt-get purge --yes --force-yes live-boot-initramfs-tools
apt-get purge --yes --force-yes live-config
apt-get purge --yes --force-yes live-config-systemd
apt-get purge --yes --force-yes live-config-doc
apt-get purge --yes --force-yes live-tools
apt-get purge --yes --force-yes live-installer
apt-get purge --yes --force-yes memtest86+
apt-get purge --yes --force-yes gparted
apt-get purge --yes --force-yes calamares
apt-get purge --yes --force-yes mc
#apt-get purge --yes --force-yes live-build
#apt-get purge --yes --force-yes live-manual-html
apt-get autoremove --yes
update-initramfs -t -c -k $(/bin/uname -r)
shadowconfig on

FOO

else

cat > /TARGET/bin/tempinstallerscript <<FOO
#!/bin/bash

#dpkg-divert --remove --rename --quiet /usr/lib/update-notifier/apt-check
#dpkg-divert --remove --rename --quiet /usr/sbin/update-initramfs
#dpkg-divert --remove --rename --quiet /usr/sbin/anacron
apt-get purge --yes --force-yes sparky-backup-core
apt-get purge --yes --force-yes live-boot
apt-get purge --yes --force-yes live-boot-doc
apt-get purge --yes --force-yes live-boot-initramfs-tools
apt-get purge --yes --force-yes live-config
apt-get purge --yes --force-yes live-config-systemd
apt-get purge --yes --force-yes live-config-doc
apt-get purge --yes --force-yes live-tools
apt-get purge --yes --force-yes live-installer
apt-get purge --yes --force-yes memtest86+
apt-get purge --yes --force-yes gparted
apt-get purge --yes --force-yes calamares
apt-get purge --yes --force-yes mc
#apt-get purge --yes --force-yes live-build
#apt-get purge --yes --force-yes live-manual-html
apt-get autoremove --yes
update-initramfs -t -c -k $(uname -r)
for i in `ls -d /home/*`; do

if [ /$i/.config/Thunar/volmanrc ]; then
  sed -i -e 's/FALSE/TRUE/g' /$i/.config/Thunar/volmanrc
  cp -f /$i/.config/volmanrc /root/.config/Thunar/volmanrc
fi

done

FOO

fi

chmod 755 /TARGET/bin/tempinstallerscript
chroot /TARGET /bin/tempinstallerscript
rm /TARGET/bin/tempinstallerscript

if [ "$GUI" != "" ]; then
	killall -KILL tail
fi

# restore resolveconf
rm -f /TARGET/etc/resolv.conf
mv /TARGET/etc/resolv.conf.bak /TARGET/etc/resolv.conf

# Setup grub
if [ "$GRUBLOCTEST" = "nogrub" ]; then
cat > /tmp/Grub-Update << FOO
#!/bin/bash
chroot /TARGET update-grub
exit 0
FOO

chmod +x /tmp/Grub-Update

	if [ "$GUI" != "" ]; then
		progressbar "Updating Grub config file...Please Wait\n" &
		$SPARKYXTERM -e /tmp/Grub-Update
		sleep 1
		rm -rf /tmp/Grub-Update
	else
		echo "Updating Grub config file."
		/tmp/Grub-Update
		sleep 1
		rm -rf /tmp/Grub-Update
	fi
	
	echo "Post-install has completed."
	echo
	echo "Unmounting the TARGET partition."
	sleep 1
	umount -R /TARGET
	sleep 1

	if [ "$GUI" != "" ]; then
		killall -KILL tail
	fi

	$DIALOG $TITLE"$TITLETEXT" $YESNO $TEXT"SparkyLinux installation is complete.\n\nIf everything went well you should have your new system installed and ready.\n\nRemember that there is NO bootloader installed so you have to do it manually.\n\nDo you want to reboot now to try it out?" $HEIGHT $WIDTH
	if [ $? != 0 ]; then
		exit 0
	else
		reboot
	fi

else
cat > /tmp/Grub-Install << FOO
#!/bin/bash
chroot /TARGET grub-install --force --no-floppy "$GRUBLOC"
#chroot /TARGET grub-mkconfig -o /boot/grub/grub.cfg
chroot /TARGET update-grub
exit 0
FOO

chmod +x /tmp/Grub-Install

	if [ "$GUI" != "" ]; then
		progressbar "Installing and setting up Grub...Please Wait\n" &
		$SPARKYXTERM -e /tmp/Grub-Install
		sleep 1
		rm -rf /tmp/Grub-Install
	else
		echo "Installing and setting up Grub."
		/tmp/Grub-Install
		sleep 1
		rm -rf /tmp/Grub-Install
	fi

	echo "Post-install has completed."
	echo
	echo "Unmounting the TARGET partition."
	sleep 1
	umount -R /TARGET
	sleep 1

	if [ "$GUI" != "" ]; then
		killall -KILL tail
	fi


	$DIALOG $TITLE"$TITLETEXT" $YESNO $TEXT"SparkyLinux installation is complete.\n\nIf everything went well you should have your new system installed and ready.\n\nDo you want to reboot now to try it out?" $HEIGHT $WIDTH

	if [ $? != 0 ]; then
		exit 0
	else
		reboot
	fi
fi
